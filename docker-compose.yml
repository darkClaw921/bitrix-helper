version: "3.9"
services:
  portainer:
    image: portainer/portainer-ce
    ports:
      - 9000:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    restart: unless-stopped
      
  postgres:
    container_name: postgres
    image: postgres:16
    
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - ../DatabasePOSTGRE:/docker-entrypoint-initdb.d
      - habrdb-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL} 
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - ../pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    

  postgres_exporter:
    container_name: exporter_container
    image: prometheuscommunity/postgres-exporter:latest
    environment:
      DATA_SOURCE_URI: "postgres:5432/habrdb?sslmode=disable"
      DATA_SOURCE_USER: ${DATA_SOURCE_USER}
      DATA_SOURCE_PASS: ${DATA_SOURCE_PASS}
      PG_EXPORTER_EXTEND_QUERY_PATH: "/etc/postgres_exporter/queries.yaml"
    volumes:
      - ./queries.yaml:/etc/postgres_exporter/queries.yaml:ro
    ports:
      - "9187:9187"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 500M
   
  
   #для личных с папкой
  
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    restart: unless-stopped

  # ollama:
  #   image: ollama/ollama
  #   container_name: ollama
  #   ports:
  #     - "11434:11434"  # Проброс порта, если необходимо
  #   volumes:
  #     - ./bitrix_helper:/data  # Пример тома для хранения данных
  #   # command: ollama run llama3.2
  #   networks:
  #     - ollama-docker

  # ollama-webui:
  #   image: ghcr.io/open-webui/open-webui:main
  #   container_name: ollama-webui
  #   volumes:
  #     - ./bitrix_helper:/app/backend/data
  #   depends_on:
  #     - ollama
  #   ports:
  #     - 8080:8080
  #   environment: # https://docs.openwebui.com/getting-started/env-configuration#default_models
  #     - OLLAMA_BASE_URLS=http://host.docker.internal:11434 #comma separated ollama hosts
  #     - ENV=dev
  #     - WEBUI_AUTH=False
  #     - WEBUI_NAME=valiantlynx AI
  #     - WEBUI_URL=http://localhost:8080
  #     - WEBUI_SECRET_KEY=t0p-s3cr3t
  #   extra_hosts:
  #     - host.docker.internal:host-gateway
  #   restart: unless-stopped
  #   networks:
  #     - ollama-docker


  telegram_connect:
    image: telegram_connect
    volumes:
      - ./bitrix_helper/telegramConnect:/app
      # - ./pyproject.toml:/app/pyproject.toml
    restart: unless-stopped
    ports:
      - "${PORT_TELEGRAM_CONNECT}:${PORT_TELEGRAM_CONNECT}"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_URL=${POSTGRES_URL}
      - PORT_TELEGRAM_CONNECT=${PORT_TELEGRAM_CONNECT}
      - TOKEN_BOT=${TOKEN_BOT}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - HANDLER_MESSAGE_URL=${HANDLER_MESSAGE_URL}:${PORT_HANDLER_MESSAGE}
      - GENERATE_ANSWER_URL=${GENERATE_ANSWER_URL}:${PORT_GENERATE_ANSWER}
    
    build:
      context: ./bitrix_helper/telegramConnect
    
    depends_on:
      - postgres

  
  handler_message:
    image: handler_message
    volumes:
      - ./bitrix_helper/handlerMessage:/app
      # - ./pyproject.toml:/app/pyproject.toml
    restart: unless-stopped
    ports:
      - "${PORT_HANDLER_MESSAGE}:${PORT_HANDLER_MESSAGE}"
    build:
      context: ./bitrix_helper/handlerMessage
    environment:
      - REDIS_URL=${REDIS_URL}
      
      # - POSTGRES_URL=${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_URL}:5432/${POSTGRES_DB}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_URL=${POSTGRES_URL}
      - SENDER_MESSAGE_URL=${SENDER_MESSAGE_URL}:${PORT_SENDER_MESSAGE}
      - GENERATE_ANSWER_URL=${GENERATE_ANSWER_URL}:${PORT_GENERATE_ANSWER}
      - PORT_HANDLER_MESSAGE=${PORT_HANDLER_MESSAGE}  
      - YANDEX_TELEMOST_TOKEN=${YANDEX_TELEMOST_TOKEN}  


  generate_answer:
    image: generate_answer
    volumes:
      - ./bitrix_helper/generateAnswer:/app
      # - ./pyproject.toml:/app/pyproject.toml
    restart: unless-stopped
    ports:
      - "${PORT_GENERATE_ANSWER}:${PORT_GENERATE_ANSWER}"
    build:
      context: ./bitrix_helper/generateAnswer
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_URL=${POSTGRES_URL}

      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - VECTOR_DB_WORK_URL=${VECTOR_DB_WORK_URL}
      - PORT_GENERATE_ANSWER=${PORT_GENERATE_ANSWER}
      - GPT_TUNNEL_API_KEY=${GPT_TUNNEL_API_KEY}
     
      - FOLDER_ID=${FOLDER_ID}
      - API_KEY_YANDEX=${API_KEY_YANDEX}
      - ID_API_KEY_YANDEX=${ID_API_KEY_YANDEX}

  sender_message:
    image: sender_message
    volumes:
      - ./bitrix_helper/senderMessage:/app
      # - ./pyproject.toml:/app/pyproject.toml
    restart: unless-stopped
    ports:
      - "${PORT_SENDER_MESSAGE}:${PORT_SENDER_MESSAGE}"
    build:
      context: ./bitrix_helper/senderMessage
    environment:
      - TOKEN_BOT=${TOKEN_BOT} #telegram
      # - INSTA_USER=${INSTA_USER}
      # - INSTA_PASSWORD=${INSTA_PASSWORD}
      - PORT_SENDER_MESSAGE=${PORT_SENDER_MESSAGE}
      - GENERATE_ANSWER_URL=${GENERATE_ANSWER_URL}:${PORT_GENERATE_ANSWER}
      # - PORT_GENERATE_ANSWER=${PORT_GENERATE_ANSWER}

  vector_db_work:
    image: vector_db_work
    volumes:
      - ./bitrix_helper/vectorDBwork:/app
      # - ./pyproject.toml:/app/pyproject.toml
    restart: unless-stopped
    ports:
      - "${PORT_VECTOR_DB_WORK}:${PORT_VECTOR_DB_WORK}"
    build:
      context: ./bitrix_helper/vectorDBwork
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_URL=${POSTGRES_URL}
      - PORT_VECTOR_DB_WORK=${PORT_VECTOR_DB_WORK}
  # bash:
  #   image: bash
  #   restart: unless-stopped
  #   tty: true
volumes:
  habrdb-data:
  # pgadmin-data:
  portainer_data:

networks:
  ollama-docker:
    external: false
#   redis-data:
#     driver: local



# networks:
#   postgres:
#     driver: bridge